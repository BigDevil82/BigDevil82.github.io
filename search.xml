<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>webpack逆向</title>
      <link href="/2021/11/14/webpack%E9%80%86%E5%90%91/"/>
      <url>/2021/11/14/webpack%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h2 id="webpack逆向-参考教程"><a href="#webpack逆向-参考教程" class="headerlink" title="webpack逆向(参考教程)"></a>webpack逆向(<a href="https://www.bilibili.com/video/BV1DQ4y1Y7Xa?from=search&seid=6419512433157301964&spm_id_from=333.337.0.0">参考教程</a>)</h2><p>[toc]</p><p>以<a href="http://react.xhup.club/search">此网站</a> 网站为例进行说明</p><h4 id="1-定位加密参数在js文件中的位置"><a href="#1-定位加密参数在js文件中的位置" class="headerlink" title="1. 定位加密参数在js文件中的位置"></a>1. 定位加密参数在js文件中的位置</h4><p>请求中的sign参数是加密的，可以通过触发链下断点找到相应位置</p><p><div class="img-item" data-src="https://i.loli.net/2021/11/14/dj3mIAxcgSe2J5H.png" data-sub-html=".caption"><img src="https://i.loli.net/2021/11/14/dj3mIAxcgSe2J5H.png" alt="image-20211114165501963"></div></p><p><div class="img-item" data-src="https://i.loli.net/2021/11/14/HUfWrxEbmezg3Py.png" data-sub-html=".caption"><img src="https://i.loli.net/2021/11/14/HUfWrxEbmezg3Py.png" alt="image-20211114165713828"></div></p><p>显然，上面的t后面的函数就是加密的函数，通过断点定位到函数的具体定义</p><h4 id="2-找到webpack的分发器"><a href="#2-找到webpack的分发器" class="headerlink" title="2. 找到webpack的分发器"></a>2. 找到webpack的分发器</h4><p>点step into 就进入一个js文件，仔细看发现这里就是<strong>webpack的分发器</strong>，代码有如下特点（这里只保留了一些反应分发器特点的代码）：</p><ol><li>这是个立即执行函数（IIFE）</li><li>有一个语句是<code>e[r].call(t.exports, t, t.exports, l)</code>,就是有它进行各种模块的调用，其中最后一个就是调用的函数。</li><li>这里传入的参数是个空数组，具体实现时可以放入需要调用的模块对象</li><li>最后的 <code>t()</code>我也不知道干啥的，后面要替换成自定定义的全局函数</li></ol><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n[r])</span><br><span class="line">        <span class="keyword">return</span> n[r].exports;</span><br><span class="line">    <span class="keyword">var</span> t = n[r] = &#123;</span><br><span class="line">        <span class="attr">i</span>: r,</span><br><span class="line">        <span class="attr">l</span>: !<span class="number">1</span>,</span><br><span class="line">        <span class="attr">exports</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">      , o = !<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        e[r].call(t.exports, t, t.exports, l),</span><br><span class="line">        o = !<span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        o &amp;&amp; <span class="keyword">delete</span> n[r]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t.l = !<span class="number">0</span>,</span><br><span class="line">    t.exports</span><br><span class="line">&#125;</span><br><span class="line">t()</span><br><span class="line">&#125;([]);</span><br></pre></td></tr></table></figure></blockquote><h4 id="3-测试能否成功调用"><a href="#3-测试能否成功调用" class="headerlink" title="3. 测试能否成功调用"></a>3. 测试能否成功调用</h4><p>把分发器的代码复制一份，定义好几个全局变量，<code>window</code>和你要在外部使用的去调用某个模块的函数，这里是<code>get_sign</code>,然后把上面提到的<code>t()</code>替换成<code>get_sign = l</code> ;这里这个 <code>l</code> 就是<code>e[r].call(t.exports, t, t.exports, l)</code>最后一个参数。然后就可以在分发器中初入一个测试对象，如下图中的，再调用<code>get_sign(&quot;0&quot;)</code>就可以执行这个函数了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="number">0</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;HHHH&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><div class="img-item" data-src="https://i.loli.net/2021/11/14/14wIX7AB8u9HJvo.png" data-sub-html=".caption"><img src="https://i.loli.net/2021/11/14/14wIX7AB8u9HJvo.png" alt="image-20211114171410546"></div></p><h4 id="4-找到加密函数所在模块"><a href="#4-找到加密函数所在模块" class="headerlink" title="4. 找到加密函数所在模块"></a>4. 找到加密函数所在模块</h4><p><div class="img-item" data-src="https://i.loli.net/2021/11/14/4Cr9H5xJt7nkZYv.png" data-sub-html=".caption"><img src="https://i.loli.net/2021/11/14/4Cr9H5xJt7nkZYv.png" alt="image-20211114172356722"></div></p><p>上面的<code>u函数</code>是关键，再定位到u函数：</p><p>u函数在 <code>aCH8</code>模块，所以只需要吧下面的这段代码放到前面和测试代码一样的位置，稍候就可以调用这个函数了。</p><p>这里注意到<code>aCH8</code>里面又调用了<code>ANhw，mmNF</code>等模块，所以需要把这些模块的代码也找到，之后定位到一个存放了各种模块的文件，直接</p><p>copy保存到一个文件<code>modules.js</code>（这里面也要顶一个window全局变量），再到主函数文件里用 <code>require(./modules.js)</code>导入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">aCH8: <span class="function"><span class="keyword">function</span>(<span class="params">e, t, n</span>) </span>&#123;</span><br><span class="line">        !<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> t = n(<span class="string">&quot;ANhw&quot;</span>)</span><br><span class="line">              , r = n(<span class="string">&quot;mmNF&quot;</span>).utf8</span><br><span class="line">              , o = n(<span class="string">&quot;BEtg&quot;</span>)</span><br><span class="line">              , a = n(<span class="string">&quot;mmNF&quot;</span>).bin</span><br><span class="line">              , u = <span class="function"><span class="keyword">function</span>(<span class="params">e, n</span>) </span>&#123;</span><br><span class="line">                e.constructor == <span class="built_in">String</span> ? e = n &amp;&amp; <span class="string">&quot;binary&quot;</span> === n.encoding ? a.stringToBytes(e) : r.stringToBytes(e) : o(e) ? e = <span class="built_in">Array</span>.prototype.slice.call(e, <span class="number">0</span>) : <span class="built_in">Array</span>.isArray(e) || e.constructor === <span class="built_in">Uint8Array</span> || (e = e.toString());</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = t.bytesToWords(e), l = <span class="number">8</span> * e.length, f = <span class="number">1732584193</span>, c = -<span class="number">271733879</span>, s = -<span class="number">1732584194</span>, d = <span class="number">271733878</span>, p = <span class="number">0</span>; p &lt; i.length; p++)</span><br><span class="line">                    i[p] = <span class="number">16711935</span> &amp; (i[p] &lt;&lt; <span class="number">8</span> | i[p] &gt;&gt;&gt; <span class="number">24</span>) | <span class="number">4278255360</span> &amp; (i[p] &lt;&lt; <span class="number">24</span> | i[p] &gt;&gt;&gt; <span class="number">8</span>);</span><br><span class="line">                i[l &gt;&gt;&gt; <span class="number">5</span>] |= <span class="number">128</span> &lt;&lt; l % <span class="number">32</span>,</span><br><span class="line">                i[<span class="number">14</span> + (l + <span class="number">64</span> &gt;&gt;&gt; <span class="number">9</span> &lt;&lt; <span class="number">4</span>)] = l;</span><br><span class="line">                <span class="keyword">var</span> v = u._ff</span><br><span class="line">                  , h = u._gg</span><br><span class="line">                  , y = u._hh</span><br><span class="line">                  , m = u._ii;</span><br><span class="line">                <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; i.length; p += <span class="number">16</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> g = f</span><br><span class="line">                      , b = c</span><br><span class="line">                      , _ = s</span><br><span class="line">                      , w = d;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> t.endian([f, c, s, d])</span><br><span class="line">            &#125;;</span><br><span class="line">            u._ff = <span class="function"><span class="keyword">function</span>(<span class="params">e, t, n, r, o, a, u</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> i = e + (t &amp; n | ~t &amp; r) + (o &gt;&gt;&gt; <span class="number">0</span>) + u;</span><br><span class="line">                <span class="keyword">return</span> (i &lt;&lt; a | i &gt;&gt;&gt; <span class="number">32</span> - a) + t</span><br><span class="line">            &#125;</span><br><span class="line">            ,</span><br><span class="line">            u._gg = <span class="function"><span class="keyword">function</span>(<span class="params">e, t, n, r, o, a, u</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> i = e + (t &amp; r | n &amp; ~r) + (o &gt;&gt;&gt; <span class="number">0</span>) + u;</span><br><span class="line">                <span class="keyword">return</span> (i &lt;&lt; a | i &gt;&gt;&gt; <span class="number">32</span> - a) + t</span><br><span class="line">            &#125;</span><br><span class="line">            ,</span><br><span class="line">            u._hh = <span class="function"><span class="keyword">function</span>(<span class="params">e, t, n, r, o, a, u</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> i = e + (t ^ n ^ r) + (o &gt;&gt;&gt; <span class="number">0</span>) + u;</span><br><span class="line">                <span class="keyword">return</span> (i &lt;&lt; a | i &gt;&gt;&gt; <span class="number">32</span> - a) + t</span><br><span class="line">            &#125;</span><br><span class="line">            ,</span><br><span class="line">            u._ii = <span class="function"><span class="keyword">function</span>(<span class="params">e, t, n, r, o, a, u</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> i = e + (n ^ (t | ~r)) + (o &gt;&gt;&gt; <span class="number">0</span>) + u;</span><br><span class="line">                <span class="keyword">return</span> (i &lt;&lt; a | i &gt;&gt;&gt; <span class="number">32</span> - a) + t</span><br><span class="line">            &#125;</span><br><span class="line">            ,</span><br><span class="line">            u._blocksize = <span class="number">16</span>,</span><br><span class="line">            u._digestsize = <span class="number">16</span>,</span><br><span class="line">            e.exports = <span class="function"><span class="keyword">function</span>(<span class="params">e, n</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">void</span> <span class="number">0</span> === e || <span class="literal">null</span> === e)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Illegal argument &quot;</span> + e);</span><br><span class="line">                <span class="keyword">var</span> r = t.wordsToBytes(u(e, n));</span><br><span class="line">                <span class="keyword">return</span> n &amp;&amp; n.asBytes ? r : n &amp;&amp; n.asString ? a.bytesToString(r) : t.bytesToHex(r)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h4 id="5-传入参数进行调用"><a href="#5-传入参数进行调用" class="headerlink" title="5. 传入参数进行调用"></a>5. 传入参数进行调用</h4><p>定位到 <code>u</code> 这个加密函数后，我们就可以在外部利用<code>get_sign</code>调用它了（实际是调用<code>aCH8</code>），如何传入明文参数呢，可以利用全局变量</p><p>在外部声明一个 <code>params</code> 变量, 然后在<code>u(e)</code>函数定义的前面直接把<code>params</code>赋值给e，就可以实现传参了；最后再调用这个函数把结果传</p><p>给全局变量，之后拿到这个结果就可以进行进一步处理然后得到加密参数了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = <span class="string">&quot;fjc_xhup好&quot;</span>;</span><br></pre></td></tr></table></figure><p><div class="img-item" data-src="https://i.loli.net/2021/11/14/UckVGOPprSDouFB.png" data-sub-html=".caption"><img src="https://i.loli.net/2021/11/14/UckVGOPprSDouFB.png" alt="image-20211114173734343"></div></p><p><div class="img-item" data-src="https://i.loli.net/2021/11/14/riu9TtKyeDRqpGM.png" data-sub-html=".caption"><img src="https://i.loli.net/2021/11/14/riu9TtKyeDRqpGM.png" alt="image-20211114173832587"></div></p><h4 id="6-最后的处理"><a href="#6-最后的处理" class="headerlink" title="6. 最后的处理"></a>6. 最后的处理</h4><p><div class="img-item" data-src="https://i.loli.net/2021/11/14/sEQxbMdo5ntezm8.png" data-sub-html=".caption"><img src="https://i.loli.net/2021/11/14/sEQxbMdo5ntezm8.png" alt="image-20211114174410361"></div></p><p>把从u得到的结果再通过两个函数处理就得到最后的sign值了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> misc = &#123;</span><br><span class="line">  <span class="attr">wordsToBytes</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = [], n = <span class="number">0</span>; n &lt; <span class="number">32</span> * e.length; n += <span class="number">8</span>)</span><br><span class="line">      t.push((e[n &gt;&gt;&gt; <span class="number">5</span>] &gt;&gt;&gt; (<span class="number">24</span> - (n % <span class="number">32</span>))) &amp; <span class="number">255</span>);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">bytesToHex</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = [], n = <span class="number">0</span>; n &lt; e.length; n++)</span><br><span class="line">      t.push((e[n] &gt;&gt;&gt; <span class="number">4</span>).toString(<span class="number">16</span>)), t.push((<span class="number">15</span> &amp; e[n]).toString(<span class="number">16</span>));</span><br><span class="line">    <span class="keyword">return</span> t.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> params = <span class="string">&quot;fjc_xhup好&quot;</span>;</span><br><span class="line">get_sign(<span class="string">&quot;aCH8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = misc[<span class="string">&quot;wordsToBytes&quot;</span>](<span class="built_in">window</span>.temp);</span><br><span class="line"><span class="keyword">var</span> sign = misc[<span class="string">&quot;bytesToHex&quot;</span>](r);</span><br><span class="line"><span class="built_in">console</span>.log(sign);</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>找到webpack分发器很关键，替换掉其中需要执行的函数</li><li>找到相关的加密模块以及依赖的其他模块</li><li>通过全局变量传入或传出参数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 破解 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客详解</title>
      <link href="/2021/10/04/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/10/04/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo搭建个人博客"><a href="#hexo搭建个人博客" class="headerlink" title="hexo搭建个人博客"></a>hexo搭建个人博客</h2><h3 id="1-安装及基础配置"><a href="#1-安装及基础配置" class="headerlink" title="1. 安装及基础配置"></a>1. 安装及基础配置</h3><ol><li>安装nodejs（<a href="https://nodejs.dev/download">下载地址</a>）</li><li>安装Git （<a href="https://git-scm.com/downloads">下载地址</a>）</li><li>安装hexo并运行：在某个文件夹下打开cmd窗口执行以下命令<ul><li>安装：     <code>npm install -g hexo-cli</code></li><li>初始化： <code>hexo init [folder] </code>  在指定目录或当前工作目录下生成一些必要的文件</li><li>生成：     <code>hexo g</code> ，如果上一步指定了folder先切换一下工作目录 <code>cd folder</code></li><li>运行：     <code>hexo s</code> ，访问 <code>http://localhost:4000</code> 即可访问默认主题下的博客页面</li></ul></li><li>利用Pages功能部署到GitHub上，以便能够让其他人访问你的博客</li></ol><hr><h3 id="2-GitHub部署"><a href="#2-GitHub部署" class="headerlink" title="2. GitHub部署"></a>2. GitHub部署</h3><ol><li><p>创建一个GitHub仓库，仓库名一定要是   <strong>账户名.github.io</strong></p></li><li><p>开通Pages服务，在仓库设置项中<div class="img-item" data-src="https://i.loli.net/2021/10/04/sHcFiajYoIkMmfZ.png" data-sub-html=".caption"><img src="https://i.loli.net/2021/10/04/sHcFiajYoIkMmfZ.png" alt="image-20211004183241428"></div></p></li><li><p>安装git部署插件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li><li><p>填写站点**_config.yml** 配置文件中最后deploy属性部分如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">你的仓库访问地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master(可能是main,视具体情况而定)</span></span><br></pre></td></tr></table></figure></li><li><p>运行命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp; hexo d</span><br></pre></td></tr></table></figure><p>上面命令就是先生成然后上传public文件夹内的文件到你的仓库</p></li><li><p>从page网址就可以进入你的博客了。</p></li></ol><hr><h3 id="3-基础配置文件说明"><a href="#3-基础配置文件说明" class="headerlink" title="3. 基础配置文件说明"></a>3. 基础配置文件说明</h3><ol><li><strong>public</strong>文件夹，里面是博客网站所需要的所有静态文件，当每次用 <code>hexo g</code> 命令之后就会生成网站所需要的文件，其中的index.html就是网站入口（主页）；</li><li><strong>scaffolds</strong>文件夹，里面是创建博客，标签，分类等文件夹所用到的模板<ul><li><code>hexo new post blog1</code></li><li><code>hexo new tags tags</code></li><li><code>hexo new categories categories</code></li></ul></li><li><strong>source</strong>文件夹，就是存放博客，标签，分类元数据等内容的</li><li><strong>themes</strong>主题文件夹，将网上找的主题放里面，在_config.yml文件中修改主题为对应主题文件夹的名字即可应用该主题</li><li><strong>_config.yml</strong>站点配置文件，在里面设置各种与网站相关的属性，具体见<a href="https://hexo.io/docs/configuration">官网</a></li><li><strong>packages.json</strong>安转的一些nodejs包，不用管。</li></ol><hr><h3 id="4-运用主题"><a href="#4-运用主题" class="headerlink" title="4. 运用主题"></a>4. 运用主题</h3><p>这里值得说明的是，官方给出的主题库中很多主题其实是存在问题的，而自己可能在使用过程中出现问题又不知道怎么去修改，所以找一个比较火的主题其实是比较推荐的（比如<a href="https://github.com/theme-next/hexo-theme-next">next</a>)。我自己选了个比较符合自己喜好的主题，但是应用的过程中踩了很多坑，这里记录一下，供大家参考借鉴，未必适用你的主题。</p><p><strong>我选用的是<a href="https://github.com/luswdev/hexo-theme-clean">clean</a>主题</strong>，比较简洁干净的一个主题，若需要使用请先阅读官方装上一些必备的包。</p><h4 id="4-1-bugs-fix"><a href="#4-1-bugs-fix" class="headerlink" title="4.1 bugs fix"></a>4.1 bugs fix</h4><p>首先修复一下主题文件中几个bug，博客最下面<em>上一页</em>和<em>下一页</em>的位置反了，找到以下文件：</p><ol><li> <code>..\MyBlog\themes\clean\layout\_partial\pagination.ejs</code>，正确代码如下：</li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;pagination d-block text-center&quot;&gt;</span><br><span class="line">  &lt;% if (page.prev)&#123; %&gt;</span><br><span class="line">  &lt;li class=&quot;previous page-item d-inline&quot;&gt;</span><br><span class="line">    &lt;a</span><br><span class="line">      href=&quot;&lt;%- config.root %&gt;&lt;%- page.prev_link %&gt;&quot;</span><br><span class="line">      class=&quot;page-link float-left&quot;</span><br><span class="line">      &gt;&amp;larr; &lt;%- __(&#x27;prev&#x27;)%&gt;&lt;/a</span><br><span class="line">    &gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;% &#125; %&gt; &lt;% if (page.next)&#123; %&gt;</span><br><span class="line">  &lt;li class=&quot;next page-item d-inline&quot;&gt;</span><br><span class="line">    &lt;a</span><br><span class="line">      href=&quot;&lt;%- config.root %&gt;&lt;%- page.next_link %&gt;&quot;</span><br><span class="line">      class=&quot;page-link float-right&quot;</span><br><span class="line">      &gt;&lt;%- __(&#x27;next&#x27;)%&gt; &amp;rarr;&lt;/a</span><br><span class="line">    &gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li> <code>..\MyBlog\themes\clean\layout\_partial\post\post-footer.ejs</code>, 正确代码如下：</li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (page.prev || page.next) &#123; %&gt;</span><br><span class="line">&lt;div class=&quot;col-lg-8 offset-lg-2 col-md-10 offset-md-1&quot;&gt;</span><br><span class="line">  &lt;ul class=&quot;pagination d-block text-center&quot;&gt;</span><br><span class="line">    &lt;% if (page.prev)&#123; %&gt;</span><br><span class="line">    &lt;li class=&quot;previous page-item d-inline&quot;&gt;</span><br><span class="line">      &lt;a href=&quot;&lt;%- url_for(page.prev.path) %&gt;&quot; class=&quot;page-link float-left&quot;</span><br><span class="line">        &gt;&amp;larr; &lt;%- __(&#x27;prev&#x27;)%&gt;&lt;/a</span><br><span class="line">      &gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;% &#125; %&gt; &lt;% if (page.next)&#123; %&gt;</span><br><span class="line">    &lt;li class=&quot;next page-item d-inline&quot;&gt;</span><br><span class="line">      &lt;a href=&quot;&lt;%- url_for(page.next.path) %&gt;&quot; class=&quot;page-link float-right&quot;</span><br><span class="line">        &gt;&lt;%- __(&#x27;next&#x27;)%&gt; &amp;rarr;&lt;/a</span><br><span class="line">      &gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h4 id="4-2-使用gitalk添加评论功能"><a href="#4-2-使用gitalk添加评论功能" class="headerlink" title="4.2 使用gitalk添加评论功能"></a>4.2 使用gitalk添加评论功能</h4><ol><li><p>注册GitHub上的OAuth应用，<a href="https://github.com/settings/applications/new">链接</a></p><ul><li>应用程序名随意填</li><li>homepageURL是你的博客网页地址，也就是上面的GitHubPages得到的地址</li><li>Authorization callback URL同上</li></ul></li><li><p>在你的<strong>主题配置文件</strong>中找到配置gitalk相关的部分，一般需要填入以下内容，也就是上述步骤得到的一些参数，accessToken也是在OAuth下的一个tab中生成的(<a href="https://github.com/settings/tokens">访问地址</a>)：</p><p><div class="img-item" data-src="https://i.loli.net/2021/10/04/R8CiTwAPyJ2tGvI.png" data-sub-html=".caption"><img src="https://i.loli.net/2021/10/04/R8CiTwAPyJ2tGvI.png" alt="image-20211004195417858"></div></p></li><li><p>注意上面的repo项填的只是你的<strong>仓库名</strong>，而不是仓库的整个访问地址，这个是用来放评论的仓库，可以直接用上面<a href="#GitHub%E9%83%A8%E7%BD%B2">步骤1</a>中创建的那个托管博客网页的仓库，也可以另外建个仓库，owner和admin就是你的<strong>用户名</strong>（一定不要填错，直接复制粘贴最保险，我就是admin漏了个字母找了超级久bug，填错在评论区会出现error not found 的错误）。</p></li></ol><p>完成以上步骤后就可以重新生成然后部署到网站上了。</p><p>以下几个是修改完一些内容后进行生成和部署的命令，比较常用：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment"># 删掉public文件夹，清理</span></span><br><span class="line">hexo g     <span class="comment"># 重新生成public内的文件</span></span><br><span class="line">hexo d     <span class="comment"># 部署到GitHub上</span></span><br></pre></td></tr></table></figure><p>部署完就可以打开你的博客看看效果了，第一次应该是要先让你用GitHub登录一下，然后就能开启评论功能了，貌似每篇博客都得你自己先登一下，不过也就一键点击的事。</p><p><div class="img-item" data-src="https://i.loli.net/2021/10/04/gb2mqoFsZ8O4TxW.png" data-sub-html=".caption"><img src="https://i.loli.net/2021/10/04/gb2mqoFsZ8O4TxW.png" alt="image-20211004175633253"></div></p><hr><h4 id="4-3-标签页-分类页-关于我等页面制作"><a href="#4-3-标签页-分类页-关于我等页面制作" class="headerlink" title="4.3 标签页 分类页 关于我等页面制作"></a>4.3 标签页 分类页 关于我等页面制作</h4><p>这里以tags页面创建为例，说明这一类页面怎么支座生成。</p><p>输入以下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags tags</span><br></pre></td></tr></table></figure><p>会在source文件夹下生成一下tags文件夹，里面有一个index.md文件，类似：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2021-10-04 14:10:47</span><br><span class="line">type: tags</span><br><span class="line"><span class="section">layout: tags</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>title可以自己改，type填tags，最后一项layout很重要，我这个主题没有这一项就无法显示标签页，也是网上找了很久的解决方案才知道的。可能有点主题不需要，如果有问题就加上试试。这一项的内容，根据你主题文件夹下用于控制便签页布局的文件名而定，比如我的主题中是这样的：</p><p><div class="img-item" data-src="https://i.loli.net/2021/10/04/fD1NBOjGzCuUr27.png" data-sub-html=".caption"><img src="https://i.loli.net/2021/10/04/fD1NBOjGzCuUr27.png" alt="image-20211004180304395"></div></p><p>那就填上tags，配置完保存即可。</p><p>然后在 source/_posts文件夹下，也就是存放博客内容的地方，对某一篇推文添加标签：</p><p><div class="img-item" data-src="https://i.loli.net/2021/10/04/gfNldJY3suhOaj2.png" data-sub-html=".caption"><img src="https://i.loli.net/2021/10/04/gfNldJY3suhOaj2.png" alt="image-20211004195807995"></div></p><p>上面展示的是一篇博客(.md文档)的头部信息，以上下三根短线 — 为开头结尾，说明一些博客基本信息，最终不会渲染出来，就像HTML文档的head部分。添加上tags这个属性，每个标签以 <strong>- tag</strong> 的格式书写，注意中间有空格，不然不能正确识别。保存后，标签页就算完成了，重新生成部署一下hexo，打开网站就能见到如下的标签搜索页：</p><p><div class="img-item" data-src="https://i.loli.net/2021/10/04/5zdAryegVpj1mhE.png" data-sub-html=".caption"><img src="https://i.loli.net/2021/10/04/5zdAryegVpj1mhE.png" alt="image-20211004200523205"></div></p><p>分类页同理制作。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About Me</title>
      <link href="/2021/10/04/About-Me/"/>
      <url>/2021/10/04/About-Me/</url>
      
        <content type="html"><![CDATA[<h1 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a>About Me</h1><p>本科毕业于华中科技大学土木工程专业，目前就读于同济大学防灾减灾工程方向。</p><p>学的是土木，爱的是编程。</p><p>虽然菜的一批，但却乐此不疲。</p><p>梦想是有个几幢楼能让我躺着收租，爱干啥干啥。</p><p>贴张好看的图以免显得单调:sweat_smile:</p><p><div class="img-item" data-src="https://i.loli.net/2021/10/04/4DmwY1UWN2BX3Mr.png" data-sub-html=".caption"><img src="https://i.loli.net/2021/10/04/4DmwY1UWN2BX3Mr.png" alt="test"></div></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DeepLearning 学习笔记</title>
      <link href="/2021/10/04/%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
      <url>/2021/10/04/%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h4 id="1-Sigmoid-neurons"><a href="#1-Sigmoid-neurons" class="headerlink" title="1. Sigmoid neurons"></a>1. <a href="http://neuralnetworksanddeeplearning.com/chap1.html#sigmoid_neurons">Sigmoid neurons</a></h4><p>该激活函数的特点是变化平缓，输入的微小改变不至于导致输出结果的巨大变化，这样才能让神经网络更好的学习，也能更好的适应于新的数据输入（从已有的外推新的时不会造成造成认知的巨大变化，已有的经验才能适用，有点像 A 学会一题解法，但是条件变一下就不会了，而 B 却能举一反三，这里就是希望算法具备 B 的特质），使算法具备更高的鲁棒性。</p><p><img src="https://i.loli.net/2021/10/04/mRJei8UGAMTO5L7.png"></p><p><img src="https://i.loli.net/2021/10/04/6mS1TKCZtNvDEkg.png"></p><p><img src="https://i.loli.net/2021/10/04/hiCP87NY1LufpDc.png"></p><h4 id="2-cost-function"><a href="#2-cost-function" class="headerlink" title="2. cost function"></a>2. cost function</h4><p><img src="https://i.loli.net/2021/10/04/MxjFLCAGmBEQKsi.png"></p><p>上式中 x 是输入向量，y 是对应于该输入的准确解向量，a 是对应于 x 的神经网络计算值；本质上 C 是关于 w, b 的一个函数，我们需要找到一组 w,b 值，是的对于任意输入的 x 向量，C 的值会很小，也就是预测值与真实值接近。而这是通过找到对于训练集（一个 x 的集合）所有 x 都能达到较好的估计效果的一组 w,x 来实现的。通过训练，让程序针对这一类问题掌握某种规律，从何应对从未接触过的新的同类问题。</p><p>解决上述问题的关键归结到找 C 函数的最小值，此处用到了梯度下降法</p><h4 id="3-gradient-descent"><a href="#3-gradient-descent" class="headerlink" title="3. gradient descent"></a>3. gradient descent</h4><p><img src="https://i.loli.net/2021/10/04/kbqovEXKHtedDC4.png"></p><p><img src="https://i.loli.net/2021/10/04/ACHK4aEqkTjvIfr.png"></p><p><img src="https://i.loli.net/2021/10/04/Ex1zmGA3ZMUgH6O.png"></p><p><img src="https://i.loli.net/2021/10/04/YMQHluWEdBCSyeG.png"></p><p><img src="https://i.loli.net/2021/10/04/dF6NOfzywu7JpBg.png"></p><p>大致总结为：</p><ul><li><p>计算 C 关于各个自变量的偏导；</p></li><li><p>取各变量的增量为一个系数（eta）乘上前面求得的偏导再去相反数，如此 C 的变化肯定是负数了，也就是下降了；这里 η 的选取是很重要的，因为这关系到第一个式子是否成了，也就是 C 能不能真的减小；</p></li><li><p>由此可以计算出一个新的 V 向量，也就朝“山坡”向下迈了一步，然后在这一个新的位置，继续上述过程，直到找到一个最低点。</p></li></ul><h4 id="4-stochastic-gradient-descent"><a href="#4-stochastic-gradient-descent" class="headerlink" title="4. stochastic gradient descent"></a>4. stochastic gradient descent</h4><p><img src="https://i.loli.net/2021/10/04/J7TBDukLMxnw5oe.png"></p><p><img src="https://i.loli.net/2021/10/04/vlMjHN2KQeV43fp.png"></p><p>由于需要找到的时一组对于所有 x 输入都比较适用的 w,b 值，因此需要考虑对于每个 x 输入求得一个梯度下降系数之后取个均值，但是这样未免太慢了点，不如把输入集分成很多同样大小的小集合，对一个小集合算出一个上述的均值梯度系数，算完后可以得到一组新的 w,b 值，也就是新起点；再在此基础上对下一个小集合继续算均值梯度系数，这样迭代下去，慢慢更新 w,b 值，直至算完所有小集合。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
